'use strict';

/*
* SimpleHash(password) - Computes a secure hash using PBKDF2
*
* @requires password {String} to be the starting password
* @returns  Promise
*/
async function SimpleHash(password) {
  // Prepare constants
  const passwordBuffer = (new TextEncoder()).encode(`hashgen::${password}::salty`);
  const importedKey = await crypto.subtle.importKey('raw', passwordBuffer, 'PBKDF2', false, ['deriveBits']);

  const bits = await crypto.subtle.deriveBits({
    name:       'PBKDF2',
    hash:       'SHA-512',
    salt:       HASH_SALT,
    iterations: HASH_ROUNDS
  }, importedKey, 512);

  return ToBase64(bits.slice(0,6));
}

/*
* SimpleKey(password) - Computes a secure key using PBKDF2
*
* @requires password {String} to be the starting password
* @requires salt     {String|false} a base64 salt for the key, false to autogenerate
* @returns  Promise
*/
async function SimpleKey(password, salt) {
  // Prepare constants
  const passwordBuffer = (new TextEncoder()).encode(`keyder::${password}::salted`);
  const importedKey = await crypto.subtle.importKey('raw', passwordBuffer, 'PBKDF2', false, ['deriveKey']);

  // Get or Generate the salt
  const saltBuffer = (salt ? FromBase64(salt) : window.crypto.getRandomValues(new Uint8Array(32)));

  // Derive a key
  const key = await crypto.subtle.deriveKey({
    name:       'PBKDF2',
    hash:       'SHA-256',
    salt:       saltBuffer,
    iterations: KEY_ROUNDS
  }, importedKey, { name: 'AES-GCM', length: 256 }, false, [ 'encrypt', 'decrypt' ]);

  return {
    key: key,
    salt: ToBase64(saltBuffer)
  };
}

/*
* SimpleEncrypt(data, key) - Encrypt some data using AES-GCM 256
*
* @requires data {String} the data to encrypt
* @requires key  {Object} a key generated by SimpleKey
* @returns  Promise
*/
async function SimpleEncrypt(data, key) {
  const dataBuffer = (new TextEncoder()).encode(data);

  const iv = window.crypto.getRandomValues(new Uint8Array(12));
  const encryptedContent = await window.crypto.subtle.encrypt({
    name: 'AES-GCM',
    iv: iv,
  }, key.key, dataBuffer);

  return JSON.stringify({
    data: ToBase64(encryptedContent),
    iv: ToBase64(iv),
    salt: key.salt
  });
}

/*
* SimpleDecrypt(data, key) - Decrypt some data using AES-GCM 256
*
* @requires data {Object} the data to decrypt
* @requires key  {Object} a CryptoKey object
* @returns  Promise
*/
async function SimpleDecrypt(data, key) {
  const dataBuffer = FromBase64(data.data);
  const iv = FromBase64(data.iv);

  const decryptedContent = await window.crypto.subtle.decrypt({
    name: 'AES-GCM',
    iv: iv,
  }, key.key, dataBuffer);

  return (new TextDecoder()).decode(decryptedContent)
}
